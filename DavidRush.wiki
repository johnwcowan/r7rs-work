My first exposure to Lisp was with LISP 1.5 in a Honeywell computer room, back in the days when disk packs walked, and drums were also for storage. Unfortunately it remained just a book on my shelf while I programmed through client-server and OO systems, and only really began to program in it to tweak my Emacsen and even better, SCWM.  In the late 90s I was using SML/NJ for my home hacking but found that the time spent wrestling with perfecting the type structures of my programs was not giving me a good RoI in terms of functionality (even though they had much greater reliability), so I switched over to Scheme, first at home and later as a double secret power tool in industry.

I found Scheme to be nearly perfect for hacking, powerful, regular, forgiving, and small enough that I could leave a project aside for 3 months due to the pressures of work and resume it without missing a beat. This small mental footprint is an *essential* feature of Scheme for me, and I consider that the greatest work of WG1 will be in avoiding the multiplication of entities in achieving the goals in the charter. Finding paradigmatic fault lines is a difficult task, and creating compatible and stable structures to exploit them is even more so, but I think that will be necessary for Thing1 to meet the goals stated in the charter.

I do feel that I am academically and intellectually playing a bit outside of my league in this group. It is rare to find people of this caliber in industry, but I will do my best to keep up.