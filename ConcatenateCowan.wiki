These procedures are similar to the `append` procedures, but rather than accepting multiple arguments, they accept a single argument which is a list.  They are equivalent to applying the corresponding `append` procedure to the list, but potentially more efficient.

`(concatenate `''list-of-lists''`)`

Returns a list which is the concatenation of the elements of ''list-of-lists''.

`(concatenate! `''list-of-lists''`)`

Returns a list which is the concatenation of the elements of ''list-of-lists'', possibly destroying those elements in the process.

`(string-concatenate `''list-of-strings''`)`.

Returns a string which is the concatenation of the elements of ''list-of-strings''.

`(vector-concatenate `''list-of-vectors''`)`

Returns a vector which is the concatenation of the elements of ''list-of-vectors''.

`(bytevector-concatenate `''list-of-bytevectors''`)`

Return a bytevector which is the concatenation of the elements of ''list-of-bytevectors''.

