== WG2 Consent Docket ==

The following items will be approved without a formal vote unless someone objects, in which case they will be moved to another docket.  See [[:WG2Dockets|WG2Dockets]] for other dockets.

Note: "Prefix stripping" means that prefixes such as `fx`, `fl`, or `bitwise-` are removed from identifiers exported by this package.  That way, users can add back their own prefixes using the facilities of `import`.

Explicit renaming macros: Uses the `er-macro-transformer` keyword (bare lambdas are unsupported).  Three arguments are provided to transformers: `form rename compare`.

Fixnum arithmetic: The R6RS `arithmetic fixnum` library with prefix stripping.

Format combinators: Alex Shinn's [[http://synthcode.com/scheme/fmt/|fmt library]], with prefix stripping and a touch of renaming.  The C formatting library is excluded.

Pretty-printer: see Format combinators

Generalized getters and setters: [[http://http://srfi.schemers.org/srfi-17/srfi-17.html|SRFI 17]].

Getopt/args-fold:  [[http://http://srfi.schemers.org/srfi-37/srfi-37.html|SRFI 37]].

Regex (S-exps and strings): Alex Shinn's [[http://synthcode.com/scheme/irregex/|irregex library]], with prefix stripping and a touch of renaming.  Specify full PCRE compatibility even though the irregex implementation doesn't support all of it.

[[http://http://srfi.schemers.org/srfi-1/srfi-1.html|SRFI 1]], list library: As written, but excluding  `cons`, `pair?`, `null?`, `car`, `cdr`, their combinations, `set-car!`, `set-cdr!`, `list`, `append`, `reverse`, `length`, `list-ref`, `map`, `for-each`, `memq`, `memv`, `member`, `assq`, `assv`, `assoc`, which are all in the `(scheme base)` library in a SRFI-1-compatible way.  '''Specification bug in SRFI 1: `any`, `every`, and `list-index` should omit the words "and returning a boolean result".'''

[[http://http://srfi.schemers.org/srfi-2/srfi-2.html|SRFI 2]], `and-let*` macro: As written.

[[http://http://srfi.schemers.org/srfi-13/srfi-13.html|SRFI 13]], string library: As written, but excluding `string?`, `make-string`, `string`, `list->string`, `string-length`, `string-ref`, `string-set!`, `string-append`, which are all in the `(scheme base)` library.  Depending on ticket #310, the procedures `string->list`, `string-copy`, `string-fill!` may also be removed.

[[http://http://srfi.schemers.org/srfi-14/srfi-14.html|SRFI 14]], character set library: As written.

[[http://http://srfi.schemers.org/srfi-31/srfi-31.html|SRFI 31]], `rec` macro: As written.

[[http://http://srfi.schemers.org/srfi-41/srfi-41.html|SRFI 41]], `(streams primitive)` and `(streams derived)` libraries: As written.

[[http://http://srfi.schemers.org/srfi-43/srfi-43.html|SRFI 43]], vector library: As written, but excluding `make-vector`, `vector`,`vector?`, `vector-ref`, `vector-length`, `vector-set!`, `list->vector`, which are all in the `(scheme base)` library.  Depending on ticket #310, `vector-copy`, `vector->list`, `vector-fill!` may also be removed.

SRFI 38, circular list read/write support: Already in WG1, so no package.

When/unless: Already in WG1, so no package.

 

