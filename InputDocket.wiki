== WG2 Input Docket ==

This docket contains work items that have not yet been voted on.  See [[:WG2Dockets|WG2Dockets]] for other dockets.

Applicable record instances (see http://www.r6rs.org/formal-comments/comment-6.txt):

`cond` `=>` with guard as well as generator (see #89):  [[http://srfi.schemers.org/srfi-61/srfi-61.html|SRFI 61]]

`cond` `=>` passes multiple values from predicate to consumer:

Combinators: CombinatorsCowan

Concatenation:  ConcatenateCowan

Container conversion: [[http://trac.sacrideo.us/wg/wiki/WG1Ballot6Results#a433fullconversioncycleforcontainers|ballot options]]

Continuation API:  [[http://repository.readscheme.org/ftp/papers/sw2001/feeley.pdf|Feeley's paper]] (PDF)

Custom I/O ports:

Default exception handler controls:

Division library: DivisionRiastradh

`drop-prefix` import spec:  

Enumerations (R6RS, but see also http://www.r6rs.org/formal-comments/comment-262.txt):

Generalized `equal`: GeneralizedEqualCowan

Evaluator arguments to procedures like `load`: #277

`export-all` library declaration: exports all identifiers defined in this library

`export-import` library declaration: syntactically the same as `import`, but exports everything that is imported

Extended exact numbers:  ExtendedRationalsCowan

External representation of records: 

Features, allowing libraries to add:

Futures:  [[http://docs.racket-lang.org/reference/futures.html|Racket API]]

Getters and setters: [[http://srfi.schemers.org/srfi-17/srfi-17.html|SRFI 17]]

`hex-digit-value`:

Identifier-syntax:

`if` with arbitrarily many arguments:

Imaginary inexact zero versions of `real?`, `rational?`, `integer?`: 

Immutable data: ImmutableData

Interrupts, timers, signals: 

Jiffy cleanup:

List library (supplementary):  ListsCowan

Macro expander(s) available at run time: 

`make-error-object` constructs error object without raising it: 

Multiple values passed through => in `cond` (see #90): 

NaN dissector API (sign, quiet/signaling status, and integer tag): NanMedernach

Natural number predicates (from WG1):  `exact-positive-integer?` and `exact-non-negative-integer?`.

`number->string` variant with control for significant digits: [[http://lists.scheme-reports.org/pipermail/scheme-reports/2011-May/000709.html|Vincent Manis proposal]], R6RS

`number->string` variant handling arbitrary Unicode decimal digits: 

Port encodings, buffering, line ending control:  SettingsListsCowan and FilesAdvancedCowan

Port type detector: #177

Procedure arity inspection: [[http://srfi.schemers.org/srfi-102/srfi-102.html|SRFI 102]]

Queues:  [[http://wiki.call-cc.org/man/4/Unit%20data-structures#queues|Chicken API]]

R6RS compatibility libraries:

Random procedures from R6RS (notably `symbol=?` and `boolean=?`): to be spelled out

`Record-let`: #45

Record external representations: 

Raw strings:  <<, """...""":

Search and mismatch procedures:  SearchMismatchCowan

Setter procedures: [[http://srfi.schemers.org/srfi-17/srfi-17.html|SRFI 17]]

`standard-*-port` routines:  R6RS

String positions and slices (see http://www.r6rs.org/formal-comments/comment-235.txt):

Symbol library:  SymbolsCowan

Syntactic closures: 

`syntax-case`:

Tree library: at least `tree=?` and `tree-copy`, probably Common Lisp [[http://www.lispworks.com/documentation/lw50/CLHS/Body/f_sublis.htm|SUBLIS and NSUBLIS]], fold, unfold, map ... 

Thread-local storage: 

Testing function arity: [[http://srfi.schemes.org/srfi-102/srfi-102.html|SRFI 102]]

Undefined value API: #49

Unquote with multiple arguments:  see #123

User-specified syntax-transformers: